<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="Perfection.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="1"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2633"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="accounts" custom_title="0" dock_id="1" table="4,8:mainaccounts"/><dock_state state="000000ff00000000fd00000001000000020000024900000213fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000002490000011800ffffff000002490000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="BookPayments" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="70"/><column index="3" value="76"/><column index="4" value="106"/><column index="6" value="64"/><column index="7" value="89"/><column index="8" value="36"/><column index="9" value="56"/><column index="10" value="157"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Lecture" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="64"/><column index="2" value="70"/><column index="3" value="60"/><column index="4" value="51"/><column index="5" value="76"/><column index="6" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="MonthlyPayments" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="70"/><column index="3" value="76"/><column index="4" value="79"/><column index="6" value="64"/><column index="7" value="89"/><column index="8" value="56"/><column index="9" value="175"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="accounts" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="85"/><column index="3" value="101"/><column index="4" value="85"/><column index="5" value="156"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">

-- STUDENT
CREATE TABLE Student (
    student_id INTEGER PRIMARY KEY,
    student_name TEXT,
    student_number TEXT,
    parent_number TEXT,
    presence_for_last_lecture BOOLEAN
);

-- GROUPS
CREATE TABLE Groups (
    group_id INTEGER PRIMARY KEY,
    group_name TEXT,
    appointment TEXT,
    student_id INTEGER,
    FOREIGN KEY (student_id) REFERENCES Student(student_id)
);

-- QUIZ
CREATE TABLE Quiz (
    quiz_id INTEGER PRIMARY KEY,
    quiz_name TEXT,
    quiz_degree REAL,
    student_id INTEGER,
    FOREIGN KEY (student_id) REFERENCES Student(student_id)
);

-- PAYMENTS
CREATE TABLE Payments (
    payment_id INTEGER PRIMARY KEY,
    student_id INTEGER,
    payment_amount REAL,
    remaining REAL,
    payment_date TEXT,
    FOREIGN KEY (student_id) REFERENCES Student(student_id)
);

-- BOOK PAYMENTS
CREATE TABLE BookPayments (
    id INTEGER PRIMARY KEY,
    student_id INTEGER,
    payment_id INTEGER,
    payment_amount REAL,
    required_to_pay REAL,
    remaining REAL,
    payment_date TEXT,
    state TEXT,
    discount REAL,
    notes_for_book_payments TEXT,
    FOREIGN KEY (student_id) REFERENCES Student(student_id),
    FOREIGN KEY (payment_id) REFERENCES Payments(payment_id)
);

-- MONTHLY PAYMENTS
CREATE TABLE MonthlyPayments (
    id INTEGER PRIMARY KEY,
    student_id INTEGER,
    payment_id INTEGER,
    group_name TEXT,
    required_to_pay REAL,
    remaining REAL,
    payment_date TEXT,
    discount REAL,
    notes_for_monthly_payments TEXT,
    FOREIGN KEY (student_id) REFERENCES Student(student_id),
    FOREIGN KEY (payment_id) REFERENCES Payments(payment_id)
);

-- OTHER PAYMENTS
CREATE TABLE OtherPayments (
    payment_id INTEGER,
    student_id INTEGER,
    amount_payed REAL,
    description TEXT,
    PRIMARY KEY (payment_id, student_id),
    FOREIGN KEY (student_id) REFERENCES Student(student_id),
    FOREIGN KEY (payment_id) REFERENCES Payments(payment_id)
);

-- SHAMEL
CREATE TABLE Shamel (
    id INTEGER PRIMARY KEY,
    shamel_name TEXT,
    degree TEXT
);

-- MONTH TABLE
CREATE TABLE Month (
    id INTEGER PRIMARY KEY,
    month_name TEXT
);

-- LECTURE TABLE
CREATE TABLE Lecture (
    lecture_id INTEGER PRIMARY KEY,
    student_id INTEGER,
    group_id INTEGER,
    quiz_id INTEGER,
    payment_id INTEGER,
    month_id INTEGER,
    FOREIGN KEY (student_id) REFERENCES Student(student_id),
    FOREIGN KEY (group_id) REFERENCES Groups(group_id),
    FOREIGN KEY (quiz_id) REFERENCES Quiz(quiz_id),
    FOREIGN KEY (payment_id) REFERENCES Payments(payment_id),
    FOREIGN KEY (month_id) REFERENCES Month(id)
);
</sql><current_tab id="0"/></tab_sql></sqlb_project>
